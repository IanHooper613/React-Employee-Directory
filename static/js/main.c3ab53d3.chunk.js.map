{"version":3,"sources":["components/TableHead.js","components/Table.js","components/Employee.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["TableHead","scope","Table","props","className","children","Employee","toRender","sorted","arrayToRender","emp","filter","isSorted","shouldSort","filtered","first","firstName","toLowerCase","last","lastName","indexOf","sort","a","b","nameA","department","nameB","comparison","reverse","map","i","key","id","email","Container","state","employees","text","handleInputChange","e","setState","target","value","clearSort","setReverseSort","clearButton","type","onClick","sortCategory","preventDefault","this","name","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3ab53d3.chunk.js","sourcesContent":["import React from 'react'\n\nconst TableHead = () => {\n    return (\n        <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">First Name</th>\n                <th scope=\"col\">Last Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Department</th>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TableHead\n","import React from 'react'\n\nconst Table = (props) => {\n    return (\n        <table className='table'>\n            {props.children}\n        </table>\n    )\n}\n\nexport default Table;","import React from 'react'\nimport TableHead from './TableHead'\nimport Table from './Table'\n\nconst Employee = ({ emp, filter, isSorted, shouldSort }) => {\n\n    const employees = emp\n    let toRender\n    let sorted\n    let arrayToRender\n\n    // Allowing the departments to sort alphabetically\n    const compare = (a,b) => {\n        const nameA = a.department.toLowerCase()\n        const nameB = b.department.toLowerCase()\n        let comparison = 0\n        if (nameA > nameB) {\n            comparison = 1\n        } else if (nameA < nameB) {\n            comparison = -1\n        }\n        return comparison\n    }\n    // Returning an array of employees whose names match the filter text\n    const filtered = employees.filter(emp => {\n        let first = emp.firstName.toLowerCase()\n        let last = emp.lastName.toLowerCase()\n        return (first.indexOf(filter) >= 0 || last.indexOf(filter) >= 0)\n    })\n    // Getting the sorted array and reversing it if need be\n    sorted = [...filtered].sort(compare)\n    if(shouldSort && !isSorted) {\n        sorted.reverse()\n    }\n    arrayToRender = sorted\n\n    // Displays the unsorted array\n    if(!shouldSort) {\n        arrayToRender = filtered\n    }\n\n    // Renders the employee info.\n    toRender = arrayToRender.map(i =>\n        <tbody key={i.id}>\n            <tr>\n                <td>{i.id}</td>\n                <td>{i.firstName}</td>\n                <td>{i.lastName}</td>\n                <td>{i.email}</td>\n                <td>{i.department}</td>\n            </tr>\n        </tbody>\n    )\n    return (\n        <Table>\n            <TableHead />\n            {toRender}\n        </Table>\n    )\n}\n\nexport default Employee","import React, { Component } from 'react'\nimport employees from '../employees.json'\nimport Employee from './Employee'\n\nclass Container extends Component {\n\n    state = {\n        employees,\n        filter: '',\n        isSorted: false,\n        shouldSort: false\n    }\n\n    clearButton;\n    text = '';\n\n    componentDidUpdate() {\n        this.setReverseSort()\n    }\n    // Updating the state and filtering from the text that was entered\n    handleInputChange = e => {\n        this.setState({\n            filter: e.target.value       \n        })\n    }\n    // Resetting the state to the original value\n    clearSort = () => {\n        this.setState({\n            isSorted: false,\n            shouldSort: false\n        })\n    }\n    // The clear button re-sets things\n    setReverseSort = () => {\n        this.clearButton = (<p />)\n        if(this.state.shouldSort) {\n            this.clearButton = (\n                <button type='submit' onClick={this.clearSort} className='btn-warning'>\n                    Clear Sort\n                </button>\n            )\n        }\n    }\n    // Changing the state to sort\n    sortCategory = e => {\n        e.preventDefault()\n        this.setState({\n            isSorted: !this.state.isSorted,\n            shouldSort: true\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className='row'>\n                    <div className='col'>\n                        <form className=\"form\">\n                            <input\n                            value={this.state.filter}\n                            name=\"filter\"\n                            onChange={this.handleInputChange}\n                            type=\"text\"\n                            placeholder=\"Filter by Name\"\n                            />\n                        </form>\n                    </div>\n                    <div className='col'>\n                        <button type=\"submit\" onClick={this.sortCategory} className=\"btn btn-success\">\n                            Sort by Department\n                        </button>\n                    </div>\n                    <div className='col'>\n                        {this.clearButton}\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col'>\n                        <Employee\n                        emp={this.state.employees}\n                        filter={this.state.filter}\n                        isSorted={this.state.isSorted}\n                        shouldSort={this.state.shouldSort}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Container","import React from 'react';\nimport './App.css';\nimport './components/Container';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>AppleBook Company Directory</h1>\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}